# .github/workflows/tag-release.yml
name: Build and Release for Tags

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10

permissions:
  contents: write
  
jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            os: 'macos'
            args: '--target universal-apple-darwin'
            rust-target: 'x86_64-apple-darwin'
            upload-files: |
              frontend/src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
              frontend/src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
          
          - platform: 'ubuntu-22.04'
            os: 'linux'
            args: '--target x86_64-unknown-linux-gnu'
            rust-target: 'x86_64-unknown-linux-gnu'
            upload-files: |
              frontend/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
              frontend/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb
          
          - platform: 'windows-latest'
            os: 'windows'
            args: '--target x86_64-pc-windows-msvc'
            rust-target: 'x86_64-pc-windows-msvc'
            upload-files: |
              frontend/src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
              frontend/src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Setup common tools that all platforms need
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}${{ matrix.os == 'macos' && ',aarch64-apple-darwin' || '' }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install uv for Python backend
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up Python
        run: uv python install 3.11
      
      # Platform-specific system dependencies
      - name: Install Linux system dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev
      
      # Common setup steps
      - name: Install Python dependencies
        run: uv sync
      
      """      - name: Build Python backend and stage as sidecar
        run: |
          uv run pyinstaller backend_standalone.spec --clean --noconfirm
          TARGET=$(rustc -Vv | grep host | cut -d' ' -f2)
          mkdir -p frontend/src-tauri/bin
          mv dist/mindful-touch-backend frontend/src-tauri/bin/mindful-touch-backend-${TARGET}
          chmod +x frontend/src-tauri/bin/mindful-touch-backend-${TARGET}
      
      - name: Build Python backend and stage as sidecar (Windows)
        if: matrix.os == 'windows'
        run: |
          uv run pyinstaller backend_standalone.spec --clean --noconfirm
          $env:TARGET = switch ($env:RUNNER_ARCH) {
            "X86" { "i686-pc-windows-msvc" }
            "X64" { "x86_64-pc-windows-msvc" }
            "ARM64" { "aarch64-pc-windows-msvc" }
          }
          New-Item -ItemType Directory -Force -Path frontend/src-tauri/bin
          Move-Item dist/mindful-touch-backend.exe "frontend/src-tauri/bin/mindful-touch-backend-$env:TARGET.exe"
      
      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked""
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            frontend/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('frontend/src-tauri/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      # macOS targets are already added in the Rust setup step above
      
      # Build the application
      - name: Build Tauri app
        working-directory: frontend/src-tauri
        run: |
          cargo tauri build ${{ matrix.args }}
      
      # Debug: List generated files
      - name: List generated bundle files (Unix)
        if: matrix.os != 'windows'
        working-directory: frontend/src-tauri
        run: |
          echo "=== Listing all target directories ==="
          find target -name "bundle" -type d 2>/dev/null || echo "No bundle directories found"
          echo "=== Listing all bundle contents ==="
          find target -path "*/bundle/*" -type f 2>/dev/null || echo "No bundle files found"
      
      - name: List generated bundle files (Windows)
        if: matrix.os == 'windows'
        working-directory: frontend/src-tauri
        run: |
          echo "=== Listing all target directories ==="
          Get-ChildItem -Path target -Recurse -Directory -Name bundle -ErrorAction SilentlyContinue
          echo "=== Listing all bundle contents ==="
          Get-ChildItem -Path target -Recurse -File | Where-Object { $_.FullName -like "*bundle*" } | Select-Object FullName
      
      # Upload artifacts for release
      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.upload-files }}
          draft: false
          prerelease: false