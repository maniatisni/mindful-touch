# .github/workflows/tag-release.yml
name: Build and Release for Tags

on:
  push:
    tags:
      - 'v*'         # e.g. v1.0, v20.15.10

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            os: macos
            args: '--target universal-apple-darwin'
            rust-target: x86_64-apple-darwin
            upload-files: |
              frontend/src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
              frontend/src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg

          #          - platform: ubuntu-22.04
#            os: linux
#            args: '--target x86_64-unknown-linux-gnu'
#            rust-target: x86_64-unknown-linux-gnu
#            upload-files: |
#              frontend/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
#              frontend/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb
#
#          - platform: windows-latest
#            os: windows
#            args: '--target x86_64-pc-windows-msvc'
#            rust-target: x86_64-pc-windows-msvc
#            upload-files: |
#              frontend/src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
#              frontend/src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}${{ matrix.os == 'macos' && ',aarch64-apple-darwin' || '' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install uv for Python backend
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: 'uv.lock'

      - name: Set up Python
        run: uv python install 3.11

      # ---------- Linux-only system deps ----------
      - name: Install Linux system dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev

      # ---------- Common Python deps ----------
      - name: Install Python dependencies
        run: uv sync

      # ---------- Build backend & stage as sidecar ----------
      - name: Build Python backend and stage as sidecar (Unix)
        if: matrix.os != 'windows'
        run: |
          uv run pyinstaller backend_standalone.spec --clean --noconfirm
          mkdir -p frontend/src-tauri/bin
          # For universal-apple-darwin builds, create both architectures
          if [ "${{ matrix.os }}" = "macos" ]; then
            cp dist/mindful-touch-backend "frontend/src-tauri/bin/mindful-touch-backend-x86_64-apple-darwin"
            cp dist/mindful-touch-backend "frontend/src-tauri/bin/mindful-touch-backend-aarch64-apple-darwin"
            chmod +x "frontend/src-tauri/bin/mindful-touch-backend-x86_64-apple-darwin"
            chmod +x "frontend/src-tauri/bin/mindful-touch-backend-aarch64-apple-darwin"
          else
            TARGET=$(rustc -Vv | grep host | cut -d' ' -f2)
            cp dist/mindful-touch-backend "frontend/src-tauri/bin/mindful-touch-backend-${TARGET}"
            chmod +x "frontend/src-tauri/bin/mindful-touch-backend-${TARGET}"
          fi

      - name: Build Python backend and stage as sidecar (Windows)
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          uv run pyinstaller backend_standalone.spec --clean --noconfirm
          $TARGET = '${{ matrix.rust-target }}'
          New-Item -ItemType Directory -Force -Path 'frontend/src-tauri/bin'
          Copy-Item 'dist/mindful-touch-backend.exe' "frontend/src-tauri/bin/mindful-touch-backend-$TARGET.exe"

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      # ---------- Cache Rust deps ----------
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            frontend/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('frontend/src-tauri/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # ---------- Build app ----------
      - name: Build Tauri app
        working-directory: frontend/src-tauri
        run: cargo tauri build ${{ matrix.args }}

      # ---------- List bundle files for debug ----------
      - name: List generated bundle files (Unix)
        if: matrix.os != 'windows'
        working-directory: frontend/src-tauri
        run: |
          echo '=== bundle dirs ==='
          find target -name bundle -type d 2>/dev/null || echo 'none'
          echo '=== bundle contents ==='
          find target -path '*/bundle/*' -type f 2>/dev/null || echo 'none'

      - name: List generated bundle files (Windows)
        if: matrix.os == 'windows'
        shell: pwsh
        working-directory: frontend/src-tauri
        run: |
          Write-Output '=== bundle dirs ==='
          Get-ChildItem -Path target -Recurse -Directory -Name bundle -ErrorAction SilentlyContinue
          Write-Output '=== bundle contents ==='
          Get-ChildItem -Path target -Recurse -File | Where-Object { $_.FullName -like '*bundle*' } | Select-Object FullName

      # ---------- Upload release artifacts ----------
      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.upload-files }}
          draft: false
          prerelease: false
